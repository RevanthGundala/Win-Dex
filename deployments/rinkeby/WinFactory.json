{
  "address": "0x48E48DeE855a6A229B6C74C2D4ce2BC9BF3788b8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "WinDex__IdenticalAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "WinDex__PairAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "WinDex__PairDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "WinDex__ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "pairingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "pairingDeleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createNewPairing",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "deletePairing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumPairs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_tokenPairing",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9960546b1702d7892a3b017272770301600397bded2aa972248cc8f058bad22",
  "receipt": {
    "to": null,
    "from": "0xE54eAE410d00F70bb2FFaE16b0EdcebB2512D1e2",
    "contractAddress": "0x48E48DeE855a6A229B6C74C2D4ce2BC9BF3788b8",
    "transactionIndex": 5,
    "gasUsed": "1666740",
    "logsBloom": "0x
    "blockHash": "0xa98aff1c6f2930296287611a239535a8b9e6cfb64e32aac86bd8cffde13e4d08",
    "transactionHash": "0xa9960546b1702d7892a3b017272770301600397bded2aa972248cc8f058bad22",
    "logs": [],
    "blockNumber": 10870392,
    "cumulativeGasUsed": "27341341",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "2c11f58f506d079359211f3cba35362d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"WinDex__IdenticalAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"WinDex__PairAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"WinDex__PairDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"WinDex__ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"pairingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"pairingDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createNewPairing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"deletePairing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_tokenPairing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WinFactory.sol\":\"WinFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/WinFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./WinPair.sol\\\";\\n\\nerror WinDex__IdenticalAddress(address tokenA, address tokenB);\\nerror WinDex__PairAlreadyExists(address pair);\\nerror WinDex__PairDoesNotExist(address pair);\\nerror WinDex__ZeroAddress(address token);\\n\\ncontract WinFactory {\\n    //list of token pairings that exist\\n    mapping(address => mapping(address => address)) public s_tokenPairing;\\n    address[] private s_liquidityPool;\\n\\n    /* Events */\\n    event pairingCreated(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address pair\\n    );\\n    event pairingDeleted(address indexed pair);\\n\\n    //function to create a liquidity pool/pairing between two tokens\\n    function createNewPairing(address tokenA, address tokenB)\\n        external\\n        returns (address pair)\\n    {\\n        checkTokens(tokenA, tokenB);\\n        checkPairAlreadyExists(s_tokenPairing[tokenA][tokenB]);\\n\\n        bytes memory bytecode = type(WinPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(tokenA, tokenB));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        s_tokenPairing[tokenA][tokenB] = pair;\\n        s_tokenPairing[tokenB][tokenA] = pair;\\n        s_liquidityPool.push(pair);\\n\\n        emit pairingCreated(tokenA, tokenB, pair);\\n        return pair;\\n    }\\n\\n    function deletePairing(address _pair) external {\\n        checkPairDoesNotExist(_pair);\\n        for (uint i = 0; i < s_liquidityPool.length; i++) {\\n            if (_pair == s_liquidityPool[i]) {\\n                delete s_liquidityPool[i];\\n                address token_pair = s_liquidityPool[\\n                    s_liquidityPool.length - 1\\n                ];\\n                s_liquidityPool[i] = token_pair;\\n                s_liquidityPool.pop();\\n                emit pairingDeleted(_pair);\\n            }\\n        }\\n    }\\n\\n    function getNumPairs() external view returns (uint) {\\n        return s_liquidityPool.length;\\n    }\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address)\\n    {\\n        checkTokens(tokenA, tokenB);\\n        checkPairDoesNotExist(s_tokenPairing[tokenA][tokenB]);\\n        for (uint i = 0; i < s_liquidityPool.length; i++) {\\n            if (s_tokenPairing[tokenA][tokenB] == s_liquidityPool[i]) {\\n                return s_liquidityPool[i];\\n            }\\n        }\\n    }\\n\\n    function checkTokens(address tokenA, address tokenB) internal pure {\\n        if (tokenA == address(0)) {\\n            revert WinDex__ZeroAddress(tokenA);\\n        }\\n        if (tokenB == address(0)) {\\n            revert WinDex__ZeroAddress(tokenB);\\n        }\\n        if (tokenA == tokenB) {\\n            revert WinDex__IdenticalAddress(tokenA, tokenB);\\n        }\\n    }\\n\\n    function checkPairDoesNotExist(address _pair) internal view {\\n        if (_pair == address(0)) {\\n            revert WinDex__PairDoesNotExist(_pair);\\n        } else {\\n            bool pairExists = false;\\n            for (uint i = 0; i < s_liquidityPool.length; i++) {\\n                if (_pair == s_liquidityPool[i]) {\\n                    pairExists = true;\\n                }\\n            }\\n            if (!pairExists) {\\n                revert WinDex__PairDoesNotExist(_pair);\\n            }\\n        }\\n    }\\n\\n    function checkPairAlreadyExists(address _pair) internal view {\\n        for (uint i = 0; i < s_liquidityPool.length; i++) {\\n            if (_pair == s_liquidityPool[i]) {\\n                revert WinDex__PairAlreadyExists(_pair);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad6546f1873708314b17a40bf18ef14c9c281598a4d70c4d9def8eaccd32a99e\",\"license\":\"MIT\"},\"contracts/WinPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./WinFactory.sol\\\";\\nimport \\\"./WinToken.sol\\\";\\n\\nerror WinPair__UnproportionalAmountDeposited(uint amountA, uint amountB);\\nerror WinPair__ZeroLiquidity(uint liquidity);\\nerror WinPair__ZeroAmountDeposited(uint amount);\\nerror WinPair__LiquidityProvidersExist();\\n\\ncontract WinPair {\\n    //  address private immutable i_pair;\\n    address private immutable i_tokenA;\\n    address private immutable i_tokenB;\\n    address[] private s_liquidityProviders;\\n\\n    uint private s_balanceTokenA;\\n    uint private s_balanceTokenB;\\n    uint private constant TRADING_FEE = 1; // subject to change\\n\\n    mapping(address => uint) private tokenTobalance;\\n    mapping(address => uint) private balanceOfUser;\\n\\n    /* Events */\\n    event liquiditySet(uint indexed amountA, uint indexed amountB);\\n    event liquidityAdded(uint indexed amountA, uint indexed amountB);\\n    event swappedTokens(address indexed tokenA, address indexed tokenB);\\n    event balancesUpdated(address indexed tokenA, address indexed tokenB);\\n    event paidLiquidityProviders(uint indexed amount);\\n\\n    constructor(\\n        address tokenA,\\n        address tokenB /*, address _pair */\\n    ) {\\n        i_tokenA = tokenA;\\n        i_tokenB = tokenB;\\n        //    i_pair = _pair;\\n    }\\n\\n    // i.e. tokenA = USDC || tokenB = ETH. LP = 1 ETH / 1000USDC\\n    //\\n\\n    // function to swap tokens\\n    function swap(address _tokenToBeSwapped, uint _amountOfToken) public {\\n        //   checkTokens(i_tokenA, i_tokenB);\\n        checkLiquidity();\\n\\n        // checkAmount(_amountOfToken);\\n\\n        // identify the token the user wants to swap\\n        address tokenToBeSwapped;\\n        address tokenToBeReceived;\\n\\n        if (i_tokenA == _tokenToBeSwapped) {\\n            tokenToBeSwapped = i_tokenA;\\n            tokenToBeReceived = i_tokenB;\\n        }\\n        tokenToBeSwapped = i_tokenB;\\n        tokenToBeReceived = i_tokenA;\\n\\n        // tell the user to pay for those fees and send them to the liquidity providers\\n        balanceOfUser[msg.sender] -= TRADING_FEE;\\n\\n        for (uint i = 0; i < s_liquidityProviders.length; i++) {\\n            // Figure out how to send trading fee to everyone based on number of WIN Tokens\\n            // you have\\n\\n            balanceOfUser[s_liquidityProviders[i]] +=\\n                TRADING_FEE /\\n                s_liquidityProviders.length;\\n        }\\n\\n        // calculate how many tokens should be recieved\\n        // 50 50 ratio between the two tokens in terms of\\n        // price * quantity\\n        // x * y = k\\n\\n        // send the number of tokens the user wants\\n        (bool callSuccess, ) = payable(msg.sender).call{value: _amountOfToken}(\\n            \\\"\\\"\\n        );\\n        require(callSuccess, \\\"Call failed\\\");\\n\\n        emit swappedTokens(tokenToBeSwapped, tokenToBeReceived);\\n\\n        // update each of the balances in the LP when swap is made\\n        tokenTobalance[tokenToBeSwapped] -= _amountOfToken;\\n        // tokenTobalance[tokenToBeReceived] += /* Amount of Tokens recieved */\\n        emit balancesUpdated(tokenToBeSwapped, tokenToBeReceived);\\n    }\\n\\n    // function to get number of liquidity providers for pair\\n    // function to pay fees to liquidity providers (based on who has ERC20 token)\\n    function payLiquidityProviders() public payable {}\\n\\n    // function to set liqiudity if this is the first itme the pair is being created\\n    function setLiquidity(uint _amountA, uint _amountB) external {\\n        //   checkPairAlreadyExists(i_pair);\\n        checkAmount(_amountA, _amountB);\\n        checkLiquidityProvidersExist();\\n\\n        s_balanceTokenA += _amountA;\\n        s_balanceTokenB += _amountB;\\n\\n        // figure out how much it costs user to deposit liqiudity\\n        //  balanceOfUser[msg.sender] -=\\n\\n        s_liquidityProviders.push(msg.sender);\\n        emit liquiditySet(_amountA, _amountB);\\n    }\\n\\n    // function to add liquidity to that pair\\n    //should give our ERC20 token if liquidity is added\\n    // based on liquidity provided\\n\\n    function addLiquidity(uint _amountA, uint _amountB) external {\\n        //   checkPairDoesNotExist(i_pair);\\n        checkAmount(_amountA, _amountB);\\n\\n        s_balanceTokenA += _amountA;\\n        s_balanceTokenB += _amountB;\\n\\n        s_liquidityProviders.push(msg.sender);\\n        emit liquidityAdded(_amountA, _amountB);\\n    }\\n\\n    function returnLiquidity() external view returns (uint, uint) {\\n        return (s_balanceTokenA, s_balanceTokenB);\\n    }\\n\\n    // function to update prices of each token based on quantity in reserves\\n\\n    function checkAmount(uint _amountA, uint _amountB) internal pure {\\n        if (_amountA <= 0) {\\n            revert WinPair__ZeroAmountDeposited(_amountA);\\n        }\\n\\n        if (_amountB <= 0) {\\n            revert WinPair__ZeroAmountDeposited(_amountB);\\n        }\\n\\n        // revert WinPair__UnproportionalAmountDeposit(_amountA, _amountB);\\n    }\\n\\n    function checkLiquidity() internal view {\\n        if (s_balanceTokenA <= 0) {\\n            revert WinPair__ZeroLiquidity(s_balanceTokenA);\\n        }\\n\\n        if (s_balanceTokenB <= 0) {\\n            revert WinPair__ZeroLiquidity(s_balanceTokenB);\\n        }\\n    }\\n\\n    function checkLiquidityProvidersExist() internal view {\\n        if (s_liquidityProviders.length > 0) {\\n            revert WinPair__LiquidityProvidersExist();\\n        }\\n    }\\n\\n    function getTradingFee() external view returns (uint) {\\n        return TRADING_FEE;\\n    }\\n}\\n\",\"keccak256\":\"0x682ceea95b719d95d699ef4e8ef76e2ec37987efae7c7d94f281588dfa38e898\",\"license\":\"MIT\"},\"contracts/WinToken.sol\":{\"content\":\"// contracts/GLDToken.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract WinToken is ERC20 {\\n    uint private s_totalSupply;\\n\\n    constructor(uint256 initialSupply) ERC20(\\\"WinToken\\\", \\\"Win\\\") {\\n        s_totalSupply += initialSupply;\\n        _mint(msg.sender, initialSupply);\\n    }\\n}\\n\",\"keccak256\":\"0x689b29fa13fb82881ce0723c34a6c37a272cf7fc73a5e9b4e8827cee6fcc3b59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80632398184d1461005c57806326c9c3201461008c5780634dc214ad146100a85780638704fc40146100c6578063e6a43905146100f6575b600080fd5b61007660048036038101906100719190610ceb565b610126565b6040516100839190610d8c565b60405180910390f35b6100a660048036038101906100a19190610cbe565b61047b565b005b6100b0610699565b6040516100bd9190610dd0565b60405180910390f35b6100e060048036038101906100db9190610ceb565b6106a6565b6040516100ed9190610d8c565b60405180910390f35b610110600480360381019061010b9190610ceb565b6106e8565b60405161011d9190610d8c565b60405180910390f35b60006101328383610917565b6101d66000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610a72565b6000604051806020016101e890610c9c565b6020820181038252601f19601f82011660405250905060008484604051602001610213929190610d60565b604051602081830303815290604052805190602001209050808251602084016000f59250826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f1ca325d8a248c144ac66441bc260a39ec462855271390b7b7da8b81c668d9b658560405161046b9190610d8c565b60405180910390a3505092915050565b61048481610b48565b60005b60018054905081101561069557600181815481106104a8576104a7610f26565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610682576001818154811061051a57610519610f26565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600180808054905061055b9190610deb565b8154811061056c5761056b610f26565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600183815481106105ae576105ad610f26565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061060857610607610ef7565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558273ffffffffffffffffffffffffffffffffffffffff167f480cc0160eaaa99ea77b486709e90901785b3de8b5127126f5a7d0a57df1e97e60405160405180910390a2505b808061068d90610e5b565b915050610487565b5050565b6000600180549050905090565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006106f48383610917565b6107986000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b48565b60005b60018054905081101561090f57600181815481106107bc576107bb610f26565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156108fc57600181815481106108c9576108c8610f26565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050610911565b808061090790610e5b565b91505061079b565b505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561098957816040517f223308930000000000000000000000000000000000000000000000000000000081526004016109809190610d8c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109fb57806040517f223308930000000000000000000000000000000000000000000000000000000081526004016109f29190610d8c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a6e5781816040517fc429ceab000000000000000000000000000000000000000000000000000000008152600401610a65929190610da7565b60405180910390fd5b5050565b60005b600180549050811015610b445760018181548110610a9657610a95610f26565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b3157816040517fc4b25254000000000000000000000000000000000000000000000000000000008152600401610b289190610d8c565b60405180910390fd5b8080610b3c90610e5b565b915050610a75565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bba57806040517f116dd389000000000000000000000000000000000000000000000000000000008152600401610bb19190610d8c565b60405180910390fd5b6000805b600180549050811015610c555760018181548110610bdf57610bde610f26565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c4257600191505b8080610c4d90610e5b565b915050610bbe565b5080610c9857816040517f116dd389000000000000000000000000000000000000000000000000000000008152600401610c8f9190610d8c565b60405180910390fd5b5050565b610da780610f7f83390190565b600081359050610cb881610f67565b92915050565b600060208284031215610cd457610cd3610f55565b5b6000610ce284828501610ca9565b91505092915050565b60008060408385031215610d0257610d01610f55565b5b6000610d1085828601610ca9565b9250506020610d2185828601610ca9565b9150509250929050565b610d3481610e1f565b82525050565b610d4b610d4682610e1f565b610ea4565b82525050565b610d5a81610e51565b82525050565b6000610d6c8285610d3a565b601482019150610d7c8284610d3a565b6014820191508190509392505050565b6000602082019050610da16000830184610d2b565b92915050565b6000604082019050610dbc6000830185610d2b565b610dc96020830184610d2b565b9392505050565b6000602082019050610de56000830184610d51565b92915050565b6000610df682610e51565b9150610e0183610e51565b925082821015610e1457610e13610ec8565b5b828203905092915050565b6000610e2a82610e31565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e6682610e51565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e9957610e98610ec8565b5b600182019050919050565b6000610eaf82610eb6565b9050919050565b6000610ec182610f5a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60008160601b9050919050565b610f7081610e1f565b8114610f7b57600080fd5b5056fe60c060405234801561001057600080fd5b50604051610da7380380610da7833981810160405281019061003291906100bc565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505061014a565b6000815190506100b681610133565b92915050565b600080604083850312156100d3576100d261012e565b5b60006100e1858286016100a7565b92505060206100f2858286016100a7565b9150509250929050565b60006101078261010e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b61013c816100fc565b811461014757600080fd5b50565b60805160601c60a05160601c610c1d61018a6000396000818161038001526103a40152600081816103200152818161035d01526103c70152610c1d6000f3fe6080604052600436106100555760003560e01c8063127f61cb1461005a5780631bd8db03146100865780632c3c1e1f146100b157806388955a5d146100bb5780639cd441da146100e4578063d004f0f71461010d575b600080fd5b34801561006657600080fd5b5061006f610136565b60405161007d929190610976565b60405180910390f35b34801561009257600080fd5b5061009b610147565b6040516100a8919061095b565b60405180910390f35b6100b9610150565b005b3480156100c757600080fd5b506100e260048036038101906100dd9190610891565b610152565b005b3480156100f057600080fd5b5061010b60048036038101906101069190610891565b61022b565b005b34801561011957600080fd5b50610134600480360381019061012f9190610851565b6102fc565b005b600080600154600254915091509091565b60006001905090565b565b61015c82826106c4565b610164610752565b816001600082825461017691906109bb565b92505081905550806002600082825461018f91906109bb565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080827ffbbbcaaede8c02d4011f67f839ff21516a6f8ba0b4242e70f55b31b7ad3f099760405160405180910390a35050565b61023582826106c4565b816001600082825461024791906109bb565b92505081905550806002600082825461026091906109bb565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080827feaef2f839ec84468e22b8f4072e1efdc55916b369ab4abbbc76613580cc4dabf60405160405180910390a35050565b610304610793565b6000808373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614156103a2577f000000000000000000000000000000000000000000000000000000000000000091507f000000000000000000000000000000000000000000000000000000000000000090505b7f000000000000000000000000000000000000000000000000000000000000000091507f000000000000000000000000000000000000000000000000000000000000000090506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104389190610a42565b9250508190555060005b6000805490508110156105065760008054905060016104619190610a11565b6004600080848154811061047857610477610b59565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104ec91906109bb565b9250508190555080806104fe90610ab2565b915050610442565b5060003373ffffffffffffffffffffffffffffffffffffffff168460405161052d90610926565b60006040518083038185875af1925050503d806000811461056a576040519150601f19603f3d011682016040523d82523d6000602084013e61056f565b606091505b50509050806105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa9061093b565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fe10e2cb44087d880df24049c1077c24f076a5889a386724037283e8f68ff90ce60405160405180910390a383600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065c9190610a42565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fb02023df1c034ab26c319ec8793cec4faa5b2b8b5b0c19cb27be49736aa0ffed60405160405180910390a35050505050565b6000821161070957816040517f836b5d0b000000000000000000000000000000000000000000000000000000008152600401610700919061095b565b60405180910390fd5b6000811161074e57806040517f836b5d0b000000000000000000000000000000000000000000000000000000008152600401610745919061095b565b60405180910390fd5b5050565b600080805490501115610791576040517f8368ba9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000600154116107dc576001546040517fcb91fd840000000000000000000000000000000000000000000000000000000081526004016107d3919061095b565b60405180910390fd5b600060025411610825576002546040517fcb91fd8400000000000000000000000000000000000000000000000000000000815260040161081c919061095b565b60405180910390fd5b565b60008135905061083681610bb9565b92915050565b60008135905061084b81610bd0565b92915050565b6000806040838503121561086857610867610b88565b5b600061087685828601610827565b92505060206108878582860161083c565b9150509250929050565b600080604083850312156108a8576108a7610b88565b5b60006108b68582860161083c565b92505060206108c78582860161083c565b9150509250929050565b60006108de600b836109aa565b91506108e982610b8d565b602082019050919050565b600061090160008361099f565b915061090c82610bb6565b600082019050919050565b61092081610aa8565b82525050565b6000610931826108f4565b9150819050919050565b60006020820190508181036000830152610954816108d1565b9050919050565b60006020820190506109706000830184610917565b92915050565b600060408201905061098b6000830185610917565b6109986020830184610917565b9392505050565b600081905092915050565b600082825260208201905092915050565b60006109c682610aa8565b91506109d183610aa8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0657610a05610afb565b5b828201905092915050565b6000610a1c82610aa8565b9150610a2783610aa8565b925082610a3757610a36610b2a565b5b828204905092915050565b6000610a4d82610aa8565b9150610a5883610aa8565b925082821015610a6b57610a6a610afb565b5b828203905092915050565b6000610a8182610a88565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610abd82610aa8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610af057610aef610afb565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b610bc281610a76565b8114610bcd57600080fd5b50565b610bd981610aa8565b8114610be457600080fd5b5056fea2646970667358221220cb00eba46a09276425136f71fcca5b2222bf3b1dcf92ebc108bb085c398b8c0e64736f6c63430008070033a2646970667358221220f4d33c0df5d28093d4da54b1d7a986f9716972f7390f90208f79d4f69a479e4e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 737,
        "contract": "contracts/WinFactory.sol:WinFactory",
        "label": "s_tokenPairing",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 740,
        "contract": "contracts/WinFactory.sol:WinFactory",
        "label": "s_liquidityPool",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}