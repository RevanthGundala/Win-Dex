{
  "address": "0xCcBE0cE8d8e4C7aFcf13fc1A451129A7f3f257C6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "WinDex__IdenticalAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "WinDex__PairAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "WinDex__PairDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "WinDex__ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "pairingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "pairingDeleted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createNewPairing",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "deletePairing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumPairs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPairAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_tokenPairing",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x04628d6162bb2b8e17a34fa96874922b44ece28e3c77c766d7a339a837c73e8b",
  "receipt": {
    "to": null,
    "from": "0xE54eAE410d00F70bb2FFaE16b0EdcebB2512D1e2",
    "contractAddress": "0xCcBE0cE8d8e4C7aFcf13fc1A451129A7f3f257C6",
    "transactionIndex": 3,
    "gasUsed": "1836691",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x354c3f50ba6679247f7db7cf14a760489b11d7030142c16b4e37a7ec8884c09e",
    "transactionHash": "0x04628d6162bb2b8e17a34fa96874922b44ece28e3c77c766d7a339a837c73e8b",
    "logs": [],
    "blockNumber": 10927524,
    "cumulativeGasUsed": "2429934",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "0ddf28f5e810d1ddb02702e662503443",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"WinDex__IdenticalAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"WinDex__PairAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"WinDex__PairDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"WinDex__ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"pairingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"pairingDeleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createNewPairing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"deletePairing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPairAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_tokenPairing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WinFactory.sol\":\"WinFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/WinFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./WinPair.sol\\\";\\r\\n\\r\\nerror WinDex__IdenticalAddress(address tokenA, address tokenB);\\r\\nerror WinDex__PairAlreadyExists(address pair);\\r\\nerror WinDex__PairDoesNotExist(address pair);\\r\\nerror WinDex__ZeroAddress(address token);\\r\\n\\r\\ncontract WinFactory {\\r\\n    // maps two token addresses to a pair address\\r\\n    mapping(address => mapping(address => address)) public s_tokenPairing;\\r\\n\\r\\n    // an array of pair addresses\\r\\n    address[] private s_liquidityPool;\\r\\n\\r\\n    // pair address is mapped to true or false if it exists or not\\r\\n    mapping(address => bool) private s_pairExists;\\r\\n\\r\\n    /* Events */\\r\\n    event pairingCreated(\\r\\n        address indexed tokenA,\\r\\n        address indexed tokenB,\\r\\n        address pair\\r\\n    );\\r\\n    event pairingDeleted(address indexed pair);\\r\\n\\r\\n    // Creates a liquidity pool/pairing between two tokens\\r\\n    function createNewPairing(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair)\\r\\n    {\\r\\n        // require statements\\r\\n        checkTokens(tokenA, tokenB);\\r\\n        checkPairAlreadyExists(s_tokenPairing[tokenA][tokenB]);\\r\\n\\r\\n        // calculating the address for the pair contract\\r\\n        bytes memory bytecode = type(WinPair).creationCode;\\r\\n        bytes32 salt = keccak256(abi.encodePacked(tokenA, tokenB));\\r\\n        assembly {\\r\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\r\\n        }\\r\\n\\r\\n        // updating the mappings with the pair address\\r\\n        s_tokenPairing[tokenA][tokenB] = pair;\\r\\n        s_tokenPairing[tokenB][tokenA] = pair;\\r\\n        s_pairExists[pair] = true;\\r\\n\\r\\n        // adding the pair to the liquidity pool array\\r\\n        s_liquidityPool.push(pair);\\r\\n\\r\\n        // emit the pairing created event\\r\\n        emit pairingCreated(tokenA, tokenB, pair);\\r\\n\\r\\n        // return the pair address\\r\\n        return pair;\\r\\n    }\\r\\n\\r\\n    // deletes a pairing between two tokens\\r\\n    function deletePairing(address _pair) external {\\r\\n        // require statements\\r\\n        checkPairDoesNotExist(_pair);\\r\\n\\r\\n        // iterate through the liquidity pool array to find the index where the pair is stored\\r\\n        for (uint i = 0; i < s_liquidityPool.length; i++) {\\r\\n            if (_pair == s_liquidityPool[i]) {\\r\\n                // delete the pair address from the array\\r\\n                delete s_liquidityPool[i];\\r\\n\\r\\n                // take a copy of the last element in the array and place it into the index\\r\\n                // where the pair was deleted to fill in the gap\\r\\n                address token_pair = s_liquidityPool[\\r\\n                    s_liquidityPool.length - 1\\r\\n                ];\\r\\n                s_liquidityPool[i] = token_pair;\\r\\n\\r\\n                // remove the last element in the array\\r\\n                s_liquidityPool.pop();\\r\\n\\r\\n                // emit the pairing deleted event\\r\\n                emit pairingDeleted(_pair);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // return the number of pairs in the liquidity pool array\\r\\n    function getNumPairs() external view returns (uint) {\\r\\n        return s_liquidityPool.length;\\r\\n    }\\r\\n\\r\\n    // return the address of a specific pair in the liquidity pool array\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        // require statements\\r\\n        checkTokens(tokenA, tokenB);\\r\\n        checkPairDoesNotExist(s_tokenPairing[tokenA][tokenB]);\\r\\n\\r\\n        // return the pair address that corresponds to the tokens\\r\\n        return s_tokenPairing[tokenA][tokenB];\\r\\n    }\\r\\n\\r\\n    // return the address of a specific pair at a specific index in the array\\r\\n    function getPairAtIndex(uint index) external view returns(address) {\\r\\n        return s_liquidityPool[index];\\r\\n    }\\r\\n\\r\\n    // should make sure tokens are valid addresses\\r\\n    function checkTokens(address tokenA, address tokenB) internal pure {\\r\\n        if (tokenA == address(0)) {\\r\\n            revert WinDex__ZeroAddress(tokenA);\\r\\n        }\\r\\n        if (tokenB == address(0)) {\\r\\n            revert WinDex__ZeroAddress(tokenB);\\r\\n        }\\r\\n        if (tokenA == tokenB) {\\r\\n            revert WinDex__IdenticalAddress(tokenA, tokenB);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // should make sure that the pair does not exist\\r\\n    function checkPairDoesNotExist(address _pair) internal view {\\r\\n        if (!s_pairExists[_pair]) {\\r\\n            revert WinDex__PairDoesNotExist(_pair);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // should make sure that the pair exists\\r\\n    function checkPairAlreadyExists(address _pair) internal view {\\r\\n        if (s_pairExists[_pair]) {\\r\\n            revert WinDex__PairAlreadyExists(_pair);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8c8b2b83bdbb335063755228c68999933259daaf9d37eabc73b1aea8a3359578\",\"license\":\"MIT\"},\"contracts/WinPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/* imports */\\r\\nimport \\\"./WinFactory.sol\\\";\\r\\nimport \\\"./WinToken.sol\\\";\\r\\n\\r\\n/* Errors */\\r\\nerror WinPair__NotEnoughLiquidityA(uint balance);\\r\\nerror WinPair__NotEnoughLiquidityB(uint balance);\\r\\nerror WinPair__ZeroAmountDeposited(uint amount);\\r\\nerror WinPair__LiquidityProvidersExist(uint providers);\\r\\nerror WinPair__InsufficientBalance(uint balance);\\r\\nerror WinPair__ZeroAddress(address token);\\r\\n\\r\\ncontract WinPair{\\r\\n    /* constant and immutable variables */\\r\\n    uint private constant TRADING_FEE = 1;\\r\\n    address private immutable i_tokenA;\\r\\n    address private immutable i_tokenB;\\r\\n\\r\\n    /* address type storage variables */\\r\\n    address[] private s_liquidityProviders;\\r\\n    address private s_tokenToBeSwapped;\\r\\n    address private s_tokenToBeGiven;\\r\\n\\r\\n    /* uint type storage variables */\\r\\n    uint private s_balanceTokenA;\\r\\n    uint private s_balanceTokenB;\\r\\n    uint private s_k;\\r\\n\\r\\n    /* mappings */\\r\\n    mapping(address => uint) private s_balanceOfUser;\\r\\n\\r\\n    /* Events */\\r\\n    event liquiditySet(uint indexed amountA, uint indexed amountB);\\r\\n    event liquidityAdded(uint indexed amountA, uint indexed amountB);\\r\\n    event swappedTokens(address indexed tokenA, address indexed tokenB);\\r\\n    event paidLiquidityProviders(uint indexed amount);\\r\\n\\r\\n    constructor(address tokenA, address tokenB) {\\r\\n        i_tokenA = tokenA;\\r\\n        i_tokenB = tokenB;\\r\\n    }\\r\\n\\r\\n    // should swap tokens based on user's input\\r\\n    function swap(address _tokenToBeSwapped, uint _amountOfToken)\\r\\n        public\\r\\n    {\\r\\n        // require statements\\r\\n        checkAmount(_amountOfToken);\\r\\n        checkLiquidity();\\r\\n\\r\\n        uint amountOtherToken;\\r\\n        uint initialTokenBalanceA = s_balanceTokenA;\\r\\n        uint initialTokenBalanceB = s_balanceTokenB;\\r\\n\\r\\n        // Logic behind swap\\r\\n        //     x * y = k\\r\\n        // --> 5 * 5 = 25\\r\\n        // --> 4 * X = 25\\r\\n        // --> X = 25 / 4\\r\\n\\r\\n        if(i_tokenA == _tokenToBeSwapped) {\\r\\n            require(s_balanceTokenA > _amountOfToken, \\\"Not Enough liquidity for token\\\");\\r\\n            s_balanceTokenA -= _amountOfToken;\\r\\n            s_balanceTokenB = s_k / s_balanceTokenA;\\r\\n           amountOtherToken = s_balanceTokenB - initialTokenBalanceB;\\r\\n           \\r\\n        }\\r\\n        else{\\r\\n            require(s_balanceTokenB > _amountOfToken, \\\"Not Enough liquidity for token\\\");\\r\\n             s_balanceTokenB -= _amountOfToken;\\r\\n            s_balanceTokenA = s_k / s_balanceTokenB;\\r\\n           amountOtherToken = s_balanceTokenA - initialTokenBalanceA;\\r\\n           \\r\\n        }\\r\\n\\r\\n        // send the number of tokens the user wants\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{value: _amountOfToken}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n        emit swappedTokens(s_tokenToBeSwapped, s_tokenToBeGiven);\\r\\n\\r\\n        payLiquidityProviders();\\r\\n        \\r\\n    }\\r\\n\\r\\n    // should pay trading fees to liquidity providers \\r\\n    function payLiquidityProviders() public payable {\\r\\n        s_balanceOfUser[msg.sender] -= TRADING_FEE;\\r\\n        uint profit = TRADING_FEE /\\r\\n                s_liquidityProviders.length;\\r\\n        for (uint i = 0; i < s_liquidityProviders.length; i++) {\\r\\n            // Figure out how to send trading fee to everyone based on number of WIN Tokens\\r\\n            // you have\\r\\n\\r\\n            s_balanceOfUser[s_liquidityProviders[i]] += profit;\\r\\n                \\r\\n        }\\r\\n        emit paidLiquidityProviders(profit);\\r\\n    }\\r\\n\\r\\n    // should set liquidity if this is the first time the pair is being created\\r\\n    function setLiquidity(uint _amountA, uint _amountB) external {\\r\\n        // require that amounts are valid\\r\\n        checkAmount(_amountA);\\r\\n        checkAmount(_amountB);\\r\\n\\r\\n       \\r\\n        // require that there is no liquidity provider for this pair\\r\\n        // -> can conclude that no one has deposited liquidity yet\\r\\n        checkLiquidityProvidersExist();\\r\\n\\r\\n\\r\\n        // update balance of tokens\\r\\n        s_balanceTokenA += _amountA;\\r\\n        s_balanceTokenB += _amountB;\\r\\n\\r\\n        // s_k should remain constant for this pairk\\r\\n        s_k = s_balanceTokenA * s_balanceTokenB;\\r\\n\\r\\n        // fee for creating a new liquidity pool taken by DEX\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{value: TRADING_FEE}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n\\r\\n        s_liquidityProviders.push(msg.sender);\\r\\n        emit liquiditySet(_amountA, _amountB);\\r\\n    }\\r\\n\\r\\n    \\r\\n    // should allow users to add liquidity for an existing pair\\r\\n    function addLiquidity(uint _amount, address _token) external {\\r\\n        checkAmount(_amount);\\r\\n\\r\\n        uint amountOtherToken;\\r\\n        uint initialTokenBalanceA = s_balanceTokenA;\\r\\n        uint initialTokenBalanceB = s_balanceTokenB;\\r\\n\\r\\n            // Logic for adding liquidity\\r\\n            //     x * y = k\\r\\n            // --> 5 * 5 = 25\\r\\n            // --> 7* X = 25\\r\\n            // --> X = 25 / 7\\r\\n\\r\\n        if(i_tokenA == _token) {\\r\\n            s_balanceTokenA += _amount;\\r\\n            s_balanceTokenB = s_k / s_balanceTokenA;\\r\\n            amountOtherToken = initialTokenBalanceB - s_balanceTokenB;\\r\\n           \\r\\n        }\\r\\n        else{\\r\\n            s_balanceTokenB += _amount;\\r\\n            s_balanceTokenA = s_k / s_balanceTokenB;\\r\\n            amountOtherToken = initialTokenBalanceA - s_balanceTokenA;\\r\\n        }\\r\\n\\r\\n        // add the user to the liquidity providers array\\r\\n        s_liquidityProviders.push(msg.sender);\\r\\n\\r\\n        // emit liquidity added event\\r\\n        emit liquidityAdded(_amount, amountOtherToken);  \\r\\n    }\\r\\n\\r\\n\\r\\n    // should return the number of tokens we have for tokenA\\r\\n    function returnLiquidityTokenA() external view returns (uint) {\\r\\n        return (s_balanceTokenA);\\r\\n    }\\r\\n\\r\\n    // should return the number of tokens we have for tokenB\\r\\n    function returnLiquidityTokenB() external view returns (uint) {\\r\\n        return (s_balanceTokenB);\\r\\n    }\\r\\n\\r\\n     function getTradingFee() external pure returns (uint) {\\r\\n        return TRADING_FEE;\\r\\n    }\\r\\n\\r\\n    // function to update prices of each token based on quantity in reserves\\r\\n\\r\\n    function checkAmount(uint _amount) internal pure {\\r\\n        if (_amount <= 0) {\\r\\n            revert WinPair__ZeroAmountDeposited(_amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // should make sure there is enough of each token to let the trade go through\\r\\n    function checkLiquidity() internal view {\\r\\n        if (s_balanceTokenA <= 0) {\\r\\n            revert WinPair__NotEnoughLiquidityA(s_balanceTokenA);\\r\\n        }\\r\\n        \\r\\n        if(s_balanceTokenB <= 0) {\\r\\n            revert WinPair__NotEnoughLiquidityB(s_balanceTokenB);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // should check if liquidity providers exist\\r\\n    function checkLiquidityProvidersExist() internal view {\\r\\n        if (s_liquidityProviders.length > 0) {\\r\\n            revert WinPair__LiquidityProvidersExist(s_liquidityProviders.length);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // should check the balance of the user to see if they can pay trading fee\\r\\n    function checkBalanceOfUser() public view {\\r\\n        if (s_balanceOfUser[msg.sender] <= TRADING_FEE) {\\r\\n            revert WinPair__InsufficientBalance(s_balanceOfUser[msg.sender]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkToken(address _token) internal pure {\\r\\n        if (_token == address(0)) {\\r\\n            revert WinPair__ZeroAddress(_token);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xec65480acb0f46ad7bb02f04550deb873e68efe692524ce3b8971e4a580ca883\",\"license\":\"MIT\"},\"contracts/WinToken.sol\":{\"content\":\"// contracts/GLDToken.sol\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract WinToken is ERC20 {\\r\\n    uint private s_totalSupply;\\r\\n\\r\\n    constructor(uint256 initialSupply) ERC20(\\\"WinToken\\\", \\\"Win\\\") {\\r\\n        s_totalSupply += initialSupply;\\r\\n        _mint(msg.sender, initialSupply);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2456f7d414dc16a12e7b7b4109da270826eab4d085da8d7a0499aa15edfc22ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632398184d1461006757806326c9c320146100975780634dc214ad146100b35780636a4e8b39146100d15780638704fc4014610101578063e6a4390514610131575b600080fd5b610081600480360381019061007c9190610bf9565b610161565b60405161008e9190610cc7565b60405180910390f35b6100b160048036038101906100ac9190610bcc565b61050e565b005b6100bb61072c565b6040516100c89190610d0b565b60405180910390f35b6100eb60048036038101906100e69190610c39565b610739565b6040516100f89190610cc7565b60405180910390f35b61011b60048036038101906101169190610bf9565b610781565b6040516101289190610cc7565b60405180910390f35b61014b60048036038101906101469190610bf9565b6107c3565b6040516101589190610cc7565b60405180910390f35b600061016d8383610917565b6102116000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610a72565b60006040518060200161022390610b95565b6020820181038252601f19601f8201166040525090506000848460405160200161024e929190610c9b565b604051602081830303815290604052805190602001209050808251602084016000f59250826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f1ca325d8a248c144ac66441bc260a39ec462855271390b7b7da8b81c668d9b65856040516104fe9190610cc7565b60405180910390a3505092915050565b61051781610b04565b60005b600180549050811015610728576001818154811061053b5761053a610e61565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561071557600181815481106105ad576105ac610e61565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600060018080805490506105ee9190610d26565b815481106105ff576105fe610e61565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806001838154811061064157610640610e61565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180548061069b5761069a610e32565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590558273ffffffffffffffffffffffffffffffffffffffff167f480cc0160eaaa99ea77b486709e90901785b3de8b5127126f5a7d0a57df1e97e60405160405180910390a2505b808061072090610d96565b91505061051a565b5050565b6000600180549050905090565b60006001828154811061074f5761074e610e61565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006107cf8383610917565b6108736000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610b04565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561098957816040517f223308930000000000000000000000000000000000000000000000000000000081526004016109809190610cc7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109fb57806040517f223308930000000000000000000000000000000000000000000000000000000081526004016109f29190610cc7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a6e5781816040517fc429ceab000000000000000000000000000000000000000000000000000000008152600401610a65929190610ce2565b60405180910390fd5b5050565b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610b0157806040517fc4b25254000000000000000000000000000000000000000000000000000000008152600401610af89190610cc7565b60405180910390fd5b50565b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b9257806040517f116dd389000000000000000000000000000000000000000000000000000000008152600401610b899190610cc7565b60405180910390fd5b50565b61116780610ed183390190565b600081359050610bb181610ea2565b92915050565b600081359050610bc681610eb9565b92915050565b600060208284031215610be257610be1610e90565b5b6000610bf084828501610ba2565b91505092915050565b60008060408385031215610c1057610c0f610e90565b5b6000610c1e85828601610ba2565b9250506020610c2f85828601610ba2565b9150509250929050565b600060208284031215610c4f57610c4e610e90565b5b6000610c5d84828501610bb7565b91505092915050565b610c6f81610d5a565b82525050565b610c86610c8182610d5a565b610ddf565b82525050565b610c9581610d8c565b82525050565b6000610ca78285610c75565b601482019150610cb78284610c75565b6014820191508190509392505050565b6000602082019050610cdc6000830184610c66565b92915050565b6000604082019050610cf76000830185610c66565b610d046020830184610c66565b9392505050565b6000602082019050610d206000830184610c8c565b92915050565b6000610d3182610d8c565b9150610d3c83610d8c565b925082821015610d4f57610d4e610e03565b5b828203905092915050565b6000610d6582610d6c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610da182610d8c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd457610dd3610e03565b5b600182019050919050565b6000610dea82610df1565b9050919050565b6000610dfc82610e95565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b60008160601b9050919050565b610eab81610d5a565b8114610eb657600080fd5b50565b610ec281610d8c565b8114610ecd57600080fd5b5056fe60c06040523480156200001157600080fd5b5060405162001167380380620011678339818101604052810190620000379190620000c4565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506200015e565b600081519050620000be8162000144565b92915050565b60008060408385031215620000de57620000dd6200013f565b5b6000620000ee85828601620000ad565b92505060206200010185828601620000ad565b9150509250929050565b600062000118826200011f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014f816200010b565b81146200015b57600080fd5b50565b60805160601c60a05160601c610fd96200018e600039600050506000818161059e015261072e0152610fd96000f3fe60806040526004361061007b5760003560e01c80639a7911741161004e5780639a79117414610109578063c95f9d0e14610120578063d004f0f714610149578063ffa86a7a146101725761007b565b80631bd8db03146100805780632c3c1e1f146100ab5780632fc078cb146100b557806388955a5d146100e0575b600080fd5b34801561008c57600080fd5b5061009561019d565b6040516100a29190610cbd565b60405180910390f35b6100b36101a6565b005b3480156100c157600080fd5b506100ca6102f9565b6040516100d79190610cbd565b60405180910390f35b3480156100ec57600080fd5b5061010760048036038101906101029190610bb0565b610303565b005b34801561011557600080fd5b5061011e6104a8565b005b34801561012c57600080fd5b5061014760048036038101906101429190610b70565b61056d565b005b34801561015557600080fd5b50610170600480360381019061016b9190610b30565b6106f5565b005b34801561017e57600080fd5b506101876109cf565b6040516101949190610cbd565b60405180910390f35b60006001905090565b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101f69190610dd5565b925050819055506000808054905060016102109190610d4a565b905060005b6000805490508110156102c857816006600080848154811061023a57610239610eec565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ae9190610cf4565b9250508190555080806102c090610e45565b915050610215565b50807fca37fba7960ad9edfde4e1e1d21cf7696d8a082ed1226867e646a9ace3f259de60405160405180910390a250565b6000600454905090565b61030c826109d9565b610315816109d9565b61031d610a21565b816003600082825461032f9190610cf4565b9250508190555080600460008282546103489190610cf4565b9250508190555060045460035461035f9190610d7b565b60058190555060003373ffffffffffffffffffffffffffffffffffffffff16600160405161038c90610c68565b60006040518083038185875af1925050503d80600081146103c9576040519150601f19603f3d011682016040523d82523d6000602084013e6103ce565b606091505b5050905080610412576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040990610c7d565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081837ffbbbcaaede8c02d4011f67f839ff21516a6f8ba0b4242e70f55b31b7ad3f099760405160405180910390a3505050565b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161056b57600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f6d96d5350000000000000000000000000000000000000000000000000000000081526004016105629190610cbd565b60405180910390fd5b565b610576826109d9565b6000806003549050600060045490508373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16141561061d5784600360008282546105eb9190610cf4565b925050819055506003546005546106029190610d4a565b600481905550600454816106169190610dd5565b925061065d565b846004600082825461062f9190610cf4565b925050819055506004546005546106469190610d4a565b6003819055506003548261065a9190610dd5565b92505b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082857feaef2f839ec84468e22b8f4072e1efdc55916b369ab4abbbc76613580cc4dabf60405160405180910390a35050505050565b6106fe816109d9565b610706610a72565b6000806003549050600060045490508473ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614156107f15783600354116107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490610c9d565b60405180910390fd5b83600360008282546107bf9190610dd5565b925050819055506003546005546107d69190610d4a565b600481905550806004546107ea9190610dd5565b9250610875565b8360045411610835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082c90610c9d565b60405180910390fd5b83600460008282546108479190610dd5565b9250508190555060045460055461085e9190610d4a565b600381905550816003546108729190610dd5565b92505b60003373ffffffffffffffffffffffffffffffffffffffff168560405161089b90610c68565b60006040518083038185875af1925050503d80600081146108d8576040519150601f19603f3d011682016040523d82523d6000602084013e6108dd565b606091505b5050905080610921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091890610c7d565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe10e2cb44087d880df24049c1077c24f076a5889a386724037283e8f68ff90ce60405160405180910390a36109c76101a6565b505050505050565b6000600354905090565b60008111610a1e57806040517f836b5d0b000000000000000000000000000000000000000000000000000000008152600401610a159190610cbd565b60405180910390fd5b50565b600080805490501115610a70576000805490506040517f1d02305a000000000000000000000000000000000000000000000000000000008152600401610a679190610cbd565b60405180910390fd5b565b600060035411610abb576003546040517f1e6ed288000000000000000000000000000000000000000000000000000000008152600401610ab29190610cbd565b60405180910390fd5b600060045411610b04576004546040517f7e191aa5000000000000000000000000000000000000000000000000000000008152600401610afb9190610cbd565b60405180910390fd5b565b600081359050610b1581610f75565b92915050565b600081359050610b2a81610f8c565b92915050565b60008060408385031215610b4757610b46610f1b565b5b6000610b5585828601610b06565b9250506020610b6685828601610b1b565b9150509250929050565b60008060408385031215610b8757610b86610f1b565b5b6000610b9585828601610b1b565b9250506020610ba685828601610b06565b9150509250929050565b60008060408385031215610bc757610bc6610f1b565b5b6000610bd585828601610b1b565b9250506020610be685828601610b1b565b9150509250929050565b6000610bfd600b83610ce3565b9150610c0882610f20565b602082019050919050565b6000610c20601e83610ce3565b9150610c2b82610f49565b602082019050919050565b6000610c43600083610cd8565b9150610c4e82610f72565b600082019050919050565b610c6281610e3b565b82525050565b6000610c7382610c36565b9150819050919050565b60006020820190508181036000830152610c9681610bf0565b9050919050565b60006020820190508181036000830152610cb681610c13565b9050919050565b6000602082019050610cd26000830184610c59565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cff82610e3b565b9150610d0a83610e3b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3f57610d3e610e8e565b5b828201905092915050565b6000610d5582610e3b565b9150610d6083610e3b565b925082610d7057610d6f610ebd565b5b828204905092915050565b6000610d8682610e3b565b9150610d9183610e3b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dca57610dc9610e8e565b5b828202905092915050565b6000610de082610e3b565b9150610deb83610e3b565b925082821015610dfe57610dfd610e8e565b5b828203905092915050565b6000610e1482610e1b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e5082610e3b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e8357610e82610e8e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f4e6f7420456e6f756768206c697175696469747920666f7220746f6b656e0000600082015250565b50565b610f7e81610e09565b8114610f8957600080fd5b50565b610f9581610e3b565b8114610fa057600080fd5b5056fea26469706673582212206b0c633309de16239d8770321c9fec88a0e945dd1ff661d9e5908c8d728f367b64736f6c63430008070033a2646970667358221220b3ad82aee42fc8c39b81dfa28bbaf34f0f354133c8e1795ab6535552b8f45c7764736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 737,
        "contract": "contracts/WinFactory.sol:WinFactory",
        "label": "s_tokenPairing",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 740,
        "contract": "contracts/WinFactory.sol:WinFactory",
        "label": "s_liquidityPool",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 744,
        "contract": "contracts/WinFactory.sol:WinFactory",
        "label": "s_pairExists",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}