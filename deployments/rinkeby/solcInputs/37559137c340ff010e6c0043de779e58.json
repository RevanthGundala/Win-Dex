{
  "language": "Solidity",
  "sources": {
    "contracts/WinFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./WinPair.sol\";\r\n\r\nerror WinDex__IdenticalAddress(address tokenA, address tokenB);\r\nerror WinDex__PairAlreadyExists(address pair);\r\nerror WinDex__PairDoesNotExist(address pair);\r\nerror WinDex__ZeroAddress(address token);\r\n\r\ncontract WinFactory {\r\n    // maps two token addresses to a pair address\r\n    mapping(address => mapping(address => address)) public s_tokenPairing;\r\n\r\n    // an array of pair addresses\r\n    address[] private s_liquidityPool;\r\n\r\n    // pair address is mapped to true or false if it exists or not\r\n    mapping(address => bool) private s_pairExists;\r\n\r\n    /* Events */\r\n    event pairingCreated(\r\n        address indexed tokenA,\r\n        address indexed tokenB,\r\n        address pair\r\n    );\r\n    event pairingDeleted(address indexed pair);\r\n\r\n    // Creates a liquidity pool/pairing between two tokens\r\n    function createNewPairing(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair)\r\n    {\r\n        // require statements\r\n        checkTokens(tokenA, tokenB);\r\n        checkPairAlreadyExists(s_tokenPairing[tokenA][tokenB]);\r\n\r\n        // calculating the address for the pair contract\r\n        bytes memory bytecode = type(WinPair).creationCode;\r\n        bytes32 salt = keccak256(abi.encodePacked(tokenA, tokenB));\r\n        assembly {\r\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\r\n        }\r\n\r\n        // updating the mappings with the pair address\r\n        s_tokenPairing[tokenA][tokenB] = pair;\r\n        s_tokenPairing[tokenB][tokenA] = pair;\r\n        s_pairExists[pair] = true;\r\n\r\n        // adding the pair to the liquidity pool array\r\n        s_liquidityPool.push(pair);\r\n\r\n        // emit the pairing created event\r\n        emit pairingCreated(tokenA, tokenB, pair);\r\n\r\n        // return the pair address\r\n        return pair;\r\n    }\r\n\r\n    // deletes a pairing between two tokens\r\n    function deletePairing(address _pair) external {\r\n        // require statements\r\n        checkPairDoesNotExist(_pair);\r\n\r\n        // iterate through the liquidity pool array to find the index where the pair is stored\r\n        for (uint i = 0; i < s_liquidityPool.length; i++) {\r\n            if (_pair == s_liquidityPool[i]) {\r\n                // delete the pair address from the array\r\n                delete s_liquidityPool[i];\r\n\r\n                // take a copy of the last element in the array and place it into the index\r\n                // where the pair was deleted to fill in the gap\r\n                address token_pair = s_liquidityPool[\r\n                    s_liquidityPool.length - 1\r\n                ];\r\n                s_liquidityPool[i] = token_pair;\r\n\r\n                // remove the last element in the array\r\n                s_liquidityPool.pop();\r\n\r\n                // emit the pairing deleted event\r\n                emit pairingDeleted(_pair);\r\n            }\r\n        }\r\n    }\r\n\r\n    // return the number of pairs in the liquidity pool array\r\n    function getNumPairs() external view returns (uint) {\r\n        return s_liquidityPool.length;\r\n    }\r\n\r\n    // return the address of a specific pair in the liquidity pool array\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address)\r\n    {\r\n        // require statements\r\n        checkTokens(tokenA, tokenB);\r\n        checkPairDoesNotExist(s_tokenPairing[tokenA][tokenB]);\r\n\r\n        // return the pair address that corresponds to the tokens\r\n        return s_tokenPairing[tokenA][tokenB];\r\n    }\r\n\r\n    // return the address of a specific pair at a specific index in the array\r\n    function getPairAtIndex(uint index) external view returns(address) {\r\n\r\n        require(index >= 0, \"Invalid index\");\r\n        checkPairDoesNotExist(s_liquidityPool[index]);\r\n\r\n        return s_liquidityPool[index];\r\n    }\r\n\r\n    // should make sure tokens are valid addresses\r\n    function checkTokens(address tokenA, address tokenB) internal pure {\r\n        if (tokenA == address(0)) {\r\n            revert WinDex__ZeroAddress(tokenA);\r\n        }\r\n        if (tokenB == address(0)) {\r\n            revert WinDex__ZeroAddress(tokenB);\r\n        }\r\n        if (tokenA == tokenB) {\r\n            revert WinDex__IdenticalAddress(tokenA, tokenB);\r\n        }\r\n    }\r\n\r\n    // should make sure that the pair does not exist\r\n    function checkPairDoesNotExist(address _pair) internal view {\r\n        if (!s_pairExists[_pair]) {\r\n            revert WinDex__PairDoesNotExist(_pair);\r\n        }\r\n    }\r\n\r\n    // should make sure that the pair exists\r\n    function checkPairAlreadyExists(address _pair) internal view {\r\n        if (s_pairExists[_pair]) {\r\n            revert WinDex__PairAlreadyExists(_pair);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/WinPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/* imports */\r\nimport \"./WinFactory.sol\";\r\nimport \"./WinToken.sol\";\r\n\r\n/* Errors */\r\nerror WinPair__NotEnoughLiquidityA(uint balance);\r\nerror WinPair__NotEnoughLiquidityB(uint balance);\r\nerror WinPair__ZeroAmountDeposited(uint amount);\r\nerror WinPair__LiquidityProvidersExist(uint providers);\r\nerror WinPair__InsufficientBalance(uint balance);\r\nerror WinPair__ZeroAddress(address token);\r\n\r\ncontract WinPair{\r\n    /* constant and immutable variables */\r\n    uint private constant TRADING_FEE = 1;\r\n    address private immutable i_tokenA;\r\n    address private immutable i_tokenB;\r\n\r\n    /* address type storage variables */\r\n    address[] private s_liquidityProviders;\r\n    address private s_tokenToBeSwapped;\r\n    address private s_tokenToBeGiven;\r\n\r\n    /* uint type storage variables */\r\n    uint private s_balanceTokenA;\r\n    uint private s_balanceTokenB;\r\n    uint private s_k;\r\n\r\n    /* mappings */\r\n    mapping(address => uint) private s_balanceOfUser;\r\n\r\n    /* Events */\r\n    event liquiditySet(uint indexed amountA, uint indexed amountB);\r\n    event liquidityAdded(uint indexed amountA, uint indexed amountB);\r\n    event swappedTokens(address indexed tokenA, address indexed tokenB);\r\n    event paidLiquidityProviders(uint indexed amount);\r\n\r\n    constructor(address tokenA, address tokenB) {\r\n        i_tokenA = tokenA;\r\n        i_tokenB = tokenB;\r\n    }\r\n\r\n    // should swap tokens based on user's input\r\n    function swap(address _tokenToBeSwapped, uint _amountOfToken)\r\n        public\r\n    {\r\n        // require statements\r\n        checkAmount(_amountOfToken);\r\n        checkLiquidity();\r\n\r\n        uint amountOtherToken;\r\n        uint initialTokenBalanceA = s_balanceTokenA;\r\n        uint initialTokenBalanceB = s_balanceTokenB;\r\n\r\n        // Logic behind swap\r\n        //     x * y = k\r\n        // --> 5 * 5 = 25\r\n        // --> 4 * X = 25\r\n        // --> X = 25 / 4\r\n\r\n        if(i_tokenA == _tokenToBeSwapped) {\r\n            require(s_balanceTokenA > _amountOfToken, \"Not Enough liquidity for token\");\r\n            s_balanceTokenA -= _amountOfToken;\r\n            s_balanceTokenB = s_k / s_balanceTokenA;\r\n           amountOtherToken = s_balanceTokenB - initialTokenBalanceB;\r\n           \r\n        }\r\n        else{\r\n            require(s_balanceTokenB > _amountOfToken, \"Not Enough liquidity for token\");\r\n             s_balanceTokenB -= _amountOfToken;\r\n            s_balanceTokenA = s_k / s_balanceTokenB;\r\n           amountOtherToken = s_balanceTokenA - initialTokenBalanceA;\r\n           \r\n        }\r\n\r\n        // send the number of tokens the user wants\r\n        (bool callSuccess, ) = payable(msg.sender).call{value: _amountOfToken}(\r\n            \"\"\r\n        );\r\n        require(callSuccess, \"Call failed\");\r\n        emit swappedTokens(s_tokenToBeSwapped, s_tokenToBeGiven);\r\n\r\n        payLiquidityProviders();\r\n        \r\n    }\r\n\r\n    // should pay trading fees to liquidity providers \r\n    function payLiquidityProviders() public payable {\r\n        s_balanceOfUser[msg.sender] -= TRADING_FEE;\r\n        uint profit = TRADING_FEE /\r\n                s_liquidityProviders.length;\r\n        for (uint i = 0; i < s_liquidityProviders.length; i++) {\r\n            // Figure out how to send trading fee to everyone based on number of WIN Tokens\r\n            // you have\r\n\r\n            s_balanceOfUser[s_liquidityProviders[i]] += profit;\r\n                \r\n        }\r\n        emit paidLiquidityProviders(profit);\r\n    }\r\n\r\n    // should set liquidity if this is the first time the pair is being created\r\n    function setLiquidity(uint _amountA, uint _amountB) external {\r\n        // require that amounts are valid\r\n        checkAmount(_amountA);\r\n        checkAmount(_amountB);\r\n\r\n       \r\n        // require that there is no liquidity provider for this pair\r\n        // -> can conclude that no one has deposited liquidity yet\r\n        checkLiquidityProvidersExist();\r\n\r\n\r\n        // update balance of tokens\r\n        s_balanceTokenA += _amountA;\r\n        s_balanceTokenB += _amountB;\r\n\r\n        // s_k should remain constant for this pairk\r\n        s_k = s_balanceTokenA * s_balanceTokenB;\r\n\r\n        // fee for creating a new liquidity pool taken by DEX\r\n        (bool callSuccess, ) = payable(msg.sender).call{value: TRADING_FEE}(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n\r\n        s_liquidityProviders.push(msg.sender);\r\n        emit liquiditySet(_amountA, _amountB);\r\n    }\r\n\r\n    \r\n    // should allow users to add liquidity for an existing pair\r\n    function addLiquidity(uint _amount, address _token) external {\r\n        checkAmount(_amount);\r\n\r\n        uint amountOtherToken;\r\n        uint initialTokenBalanceA = s_balanceTokenA;\r\n        uint initialTokenBalanceB = s_balanceTokenB;\r\n\r\n            // Logic for adding liquidity\r\n            //     x * y = k\r\n            // --> 5 * 5 = 25\r\n            // --> 7* X = 25\r\n            // --> X = 25 / 7\r\n\r\n        if(i_tokenA == _token) {\r\n            s_balanceTokenA += _amount;\r\n            s_balanceTokenB = s_k / s_balanceTokenA;\r\n            amountOtherToken = initialTokenBalanceB - s_balanceTokenB;\r\n           \r\n        }\r\n        else{\r\n            s_balanceTokenB += _amount;\r\n            s_balanceTokenA = s_k / s_balanceTokenB;\r\n            amountOtherToken = initialTokenBalanceA - s_balanceTokenA;\r\n        }\r\n\r\n        // add the user to the liquidity providers array\r\n        s_liquidityProviders.push(msg.sender);\r\n\r\n        // emit liquidity added event\r\n        emit liquidityAdded(_amount, amountOtherToken);  \r\n    }\r\n\r\n\r\n    // should return the number of tokens we have for tokenA\r\n    function returnLiquidityTokenA() external view returns (uint) {\r\n        return (s_balanceTokenA);\r\n    }\r\n\r\n    // should return the number of tokens we have for tokenB\r\n    function returnLiquidityTokenB() external view returns (uint) {\r\n        return (s_balanceTokenB);\r\n    }\r\n\r\n     function getTradingFee() external pure returns (uint) {\r\n        return TRADING_FEE;\r\n    }\r\n\r\n    // function to update prices of each token based on quantity in reserves\r\n\r\n    function checkAmount(uint _amount) internal pure {\r\n        if (_amount <= 0) {\r\n            revert WinPair__ZeroAmountDeposited(_amount);\r\n        }\r\n    }\r\n\r\n    // should make sure there is enough of each token to let the trade go through\r\n    function checkLiquidity() internal view {\r\n        if (s_balanceTokenA <= 0) {\r\n            revert WinPair__NotEnoughLiquidityA(s_balanceTokenA);\r\n        }\r\n        \r\n        if(s_balanceTokenB <= 0) {\r\n            revert WinPair__NotEnoughLiquidityB(s_balanceTokenB);\r\n        }\r\n    }\r\n\r\n    // should check if liquidity providers exist\r\n    function checkLiquidityProvidersExist() internal view {\r\n        if (s_liquidityProviders.length > 0) {\r\n            revert WinPair__LiquidityProvidersExist(s_liquidityProviders.length);\r\n        }\r\n    }\r\n\r\n    // should check the balance of the user to see if they can pay trading fee\r\n    function checkBalanceOfUser() public view {\r\n        if (s_balanceOfUser[msg.sender] <= TRADING_FEE) {\r\n            revert WinPair__InsufficientBalance(s_balanceOfUser[msg.sender]);\r\n        }\r\n    }\r\n\r\n    function checkToken(address _token) internal pure {\r\n        if (_token == address(0)) {\r\n            revert WinPair__ZeroAddress(_token);\r\n        }\r\n    }\r\n}\r\n\r\n"
    },
    "contracts/WinToken.sol": {
      "content": "// contracts/GLDToken.sol\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract WinToken is ERC20 {\r\n    uint private s_totalSupply;\r\n\r\n    constructor(uint256 initialSupply) ERC20(\"WinToken\", \"Win\") {\r\n        s_totalSupply += initialSupply;\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}