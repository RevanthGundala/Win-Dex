{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "WinPair__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "providers",
          "type": "uint256"
        }
      ],
      "name": "WinPair__LiquidityProvidersExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "WinPair__NotEnoughLiquidityA",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "WinPair__NotEnoughLiquidityB",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WinPair__ZeroAmountDeposited",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "liquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "liquiditySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "paidLiquidityProviders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "swappedTokens",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkBalanceOfUser",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAmountOtherToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityTokenA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityTokenB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTradingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payLiquidityProviders",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountB",
          "type": "uint256"
        }
      ],
      "name": "setLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenToBeSwapped",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOfToken",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8eef59c3b0ca240456affcd8db70a911ced2043fe749f82c02c6cbed48c06237",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "947665",
    "logsBloom": "0x
    "blockHash": "0x74a19bc6ee61cb9719423105d080047617d0a9a759801e39c09193861ae0a553",
    "transactionHash": "0x8eef59c3b0ca240456affcd8db70a911ced2043fe749f82c02c6cbed48c06237",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "947665",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7d66CDe53cc0A169cAE32712fC48934e610aeF14",
    "0x577D296678535e4903D59A4C929B718e1D575e0A"
  ],
  "numDeployments": 1,
  "solcInputHash": "f63f50bf201729ed513e6ab7ce4c2a55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WinPair__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providers\",\"type\":\"uint256\"}],\"name\":\"WinPair__LiquidityProvidersExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WinPair__NotEnoughLiquidityA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WinPair__NotEnoughLiquidityB\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinPair__ZeroAmountDeposited\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"liquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"liquiditySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"paidLiquidityProviders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"swappedTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkBalanceOfUser\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountOtherToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityTokenA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityTokenB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payLiquidityProviders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"name\":\"setLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenToBeSwapped\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfToken\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WinPair.sol\":\"WinPair\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/WinFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./WinPair.sol\\\";\\n\\nerror WinDex__IdenticalAddress(address tokenA, address tokenB);\\nerror WinDex__PairAlreadyExists(address pair);\\nerror WinDex__PairDoesNotExist(address pair);\\nerror WinDex__ZeroAddress(address token);\\n\\ncontract WinFactory {\\n    // maps two token addresses to a pair address\\n    mapping(address => mapping(address => address)) public s_tokenPairing;\\n\\n    // an array of pair addresses\\n    address[] private s_liquidityPool;\\n\\n    // pair address is mapped to true or false if it exists or not\\n    mapping(address => bool) private s_pairExists;\\n\\n    /* Events */\\n    event pairingCreated(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address pair\\n    );\\n    event pairingDeleted(address indexed pair);\\n\\n    // Creates a liquidity pool/pairing between two tokens\\n    function createNewPairing(address tokenA, address tokenB)\\n        external\\n        returns (address pair)\\n    {\\n        // require statements\\n        checkTokens(tokenA, tokenB);\\n        checkPairAlreadyExists(s_tokenPairing[tokenA][tokenB]);\\n\\n        //\\\"https://github.com/Uniswap/v2-core\\\"\\n        //requires that first token is lower in order\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        tokenA = token0;\\n        tokenB = token1;\\n        // calculating the address for the pair contract\\n        bytes memory bytecode = type(WinPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(tokenA, tokenB));\\n        assembly {\\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n\\n        // updating the mappings with the pair address\\n        s_tokenPairing[tokenA][tokenB] = pair;\\n        s_tokenPairing[tokenB][tokenA] = pair;\\n        s_pairExists[pair] = true;\\n\\n        // adding the pair to the liquidity pool array\\n        s_liquidityPool.push(pair);\\n\\n        // emit the pairing created event\\n        emit pairingCreated(tokenA, tokenB, pair);\\n\\n        // return the pair address\\n        return pair;\\n    }\\n\\n    // deletes a pairing between two tokens\\n    function deletePairing(address _pair) external {\\n        // require statements\\n        checkPairDoesNotExist(_pair);\\n\\n        // iterate through the liquidity pool array to find the index where the pair is stored\\n        for (uint i = 0; i < s_liquidityPool.length; i++) {\\n            if (_pair == s_liquidityPool[i]) {\\n                // delete the pair address from the array\\n                delete s_liquidityPool[i];\\n\\n                // take a copy of the last element in the array and place it into the index\\n                // where the pair was deleted to fill in the gap\\n                address token_pair = s_liquidityPool[\\n                    s_liquidityPool.length - 1\\n                ];\\n                s_liquidityPool[i] = token_pair;\\n\\n                // remove the last element in the array\\n                s_liquidityPool.pop();\\n\\n                // emit the pairing deleted event\\n                emit pairingDeleted(_pair);\\n            }\\n        }\\n    }\\n\\n    // return the number of pairs in the liquidity pool array\\n    function getNumPairs() external view returns (uint) {\\n        return s_liquidityPool.length;\\n    }\\n\\n    // return the address of a specific pair in the liquidity pool array\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address)\\n    {\\n        // require statements\\n        checkTokens(tokenA, tokenB);\\n        checkPairDoesNotExist(s_tokenPairing[tokenA][tokenB]);\\n\\n        // return the pair address that corresponds to the tokens\\n        return s_tokenPairing[tokenA][tokenB];\\n    }\\n\\n    // return the address of a specific pair at a specific index in the array\\n    function getPairAtIndex(uint index) external view returns (address) {\\n        return s_liquidityPool[index];\\n    }\\n\\n    // should make sure tokens are valid addresses\\n    function checkTokens(address tokenA, address tokenB) internal pure {\\n        if (tokenA == address(0)) {\\n            revert WinDex__ZeroAddress(tokenA);\\n        }\\n        if (tokenB == address(0)) {\\n            revert WinDex__ZeroAddress(tokenB);\\n        }\\n        if (tokenA == tokenB) {\\n            revert WinDex__IdenticalAddress(tokenA, tokenB);\\n        }\\n    }\\n\\n    // should make sure that the pair does not exist\\n    function checkPairDoesNotExist(address _pair) internal view {\\n        if (!s_pairExists[_pair]) {\\n            revert WinDex__PairDoesNotExist(_pair);\\n        }\\n    }\\n\\n    // should make sure that the pair exists\\n    function checkPairAlreadyExists(address _pair) internal view {\\n        if (s_pairExists[_pair]) {\\n            revert WinDex__PairAlreadyExists(_pair);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3b7e93afcb08e5e6ad9ac2fffac204bf652925141c8bed03785c66706b5d253\",\"license\":\"MIT\"},\"contracts/WinPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/* imports */\\nimport \\\"./WinFactory.sol\\\";\\nimport \\\"./WinToken.sol\\\";\\n\\n/* Errors */\\nerror WinPair__NotEnoughLiquidityA(uint balance);\\nerror WinPair__NotEnoughLiquidityB(uint balance);\\nerror WinPair__ZeroAmountDeposited(uint amount);\\nerror WinPair__LiquidityProvidersExist(uint providers);\\nerror WinPair__InsufficientBalance(uint balance);\\nerror WinPair__ZeroAddress(address token);\\n\\ncontract WinPair {\\n    /* constant and immutable variables */\\n    uint private constant TRADING_FEE = 1;\\n    address private immutable i_tokenA;\\n    address private immutable i_tokenB;\\n\\n    /* address type storage variables */\\n    address[] private s_liquidityProviders;\\n    address private s_tokenToBeSwapped;\\n    address private s_tokenToBeGiven;\\n\\n    /* uint type storage variables */\\n    uint private s_balanceTokenA;\\n    uint private s_balanceTokenB;\\n    uint private s_k;\\n    uint private s_amountOtherToken;\\n\\n    /* mappings */\\n    mapping(address => uint) private s_balanceOfUser;\\n\\n    /* Events */\\n    event liquiditySet(uint indexed amountA, uint indexed amountB);\\n    event liquidityAdded(uint indexed amountA, uint indexed amountB);\\n    event swappedTokens(address indexed tokenA, address indexed tokenB);\\n    event paidLiquidityProviders(uint indexed amount);\\n\\n    constructor(address tokenA, address tokenB) {\\n        i_tokenA = tokenA;\\n        i_tokenB = tokenB;\\n    }\\n\\n    // should swap tokens based on user's input\\n    function swap(address _tokenToBeSwapped, uint _amountOfToken) public {\\n        // require statements\\n        checkAmount(_amountOfToken);\\n        checkLiquidity();\\n\\n        uint initialTokenBalanceA = s_balanceTokenA;\\n        uint initialTokenBalanceB = s_balanceTokenB;\\n\\n        // Logic behind swap\\n        //     x * y = k\\n        // --> 5 * 5 = 25\\n        // --> 4 * X = 25\\n        // --> X = 25 / 4\\n\\n        if (i_tokenA == _tokenToBeSwapped) {\\n            require(\\n                s_balanceTokenA > _amountOfToken,\\n                \\\"Not Enough liquidity for token\\\"\\n            );\\n            s_balanceTokenA -= _amountOfToken;\\n            s_balanceTokenB = s_k / s_balanceTokenA;\\n            s_amountOtherToken = s_balanceTokenB - initialTokenBalanceB;\\n        } else {\\n            require(\\n                s_balanceTokenB > _amountOfToken,\\n                \\\"Not Enough liquidity for token\\\"\\n            );\\n            s_balanceTokenB -= _amountOfToken;\\n            s_balanceTokenA = s_k / s_balanceTokenB;\\n            s_amountOtherToken = s_balanceTokenA - initialTokenBalanceA;\\n        }\\n\\n        // send the number of tokens the user wants\\n        (bool callSuccess, ) = payable(msg.sender).call{value: _amountOfToken}(\\n            \\\"\\\"\\n        );\\n        require(callSuccess, \\\"Call failed\\\");\\n        emit swappedTokens(s_tokenToBeSwapped, s_tokenToBeGiven);\\n\\n        payLiquidityProviders();\\n    }\\n\\n    // should pay trading fees to liquidity providers\\n    function payLiquidityProviders() public payable {\\n        s_balanceOfUser[msg.sender] -= TRADING_FEE;\\n        uint profit = TRADING_FEE / s_liquidityProviders.length;\\n        for (uint i = 0; i < s_liquidityProviders.length; i++) {\\n            // Figure out how to send trading fee to everyone based on number of WIN Tokens\\n            // you have\\n\\n            s_balanceOfUser[s_liquidityProviders[i]] += profit;\\n        }\\n        emit paidLiquidityProviders(profit);\\n    }\\n\\n    // should set liquidity if this is the first time the pair is being created\\n    function setLiquidity(uint _amountA, uint _amountB) external {\\n        // require that amounts are valid\\n        checkAmount(_amountA);\\n        checkAmount(_amountB);\\n\\n        // require that there is no liquidity provider for this pair\\n        // -> can conclude that no one has deposited liquidity yet\\n        checkLiquidityProvidersExist();\\n\\n        // update balance of tokens\\n        s_balanceTokenA += _amountA;\\n        s_balanceTokenB += _amountB;\\n\\n        // s_k should remain constant for this pairk\\n        s_k = s_balanceTokenA * s_balanceTokenB;\\n\\n        // fee for creating a new liquidity pool taken by DEX\\n        (bool callSuccess, ) = payable(msg.sender).call{value: TRADING_FEE}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n\\n        s_liquidityProviders.push(msg.sender);\\n        emit liquiditySet(_amountA, _amountB);\\n    }\\n\\n    // should allow users to add liquidity for an existing pair\\n    function addLiquidity(uint _amount, address _token) external {\\n        checkAmount(_amount);\\n\\n        uint initialTokenBalanceA = s_balanceTokenA;\\n        uint initialTokenBalanceB = s_balanceTokenB;\\n\\n        // Logic for adding liquidity\\n        //     x * y = k\\n        // --> 5 * 5 = 25\\n        // --> 7* X = 25\\n        // --> X = 25 / 7\\n\\n        if (i_tokenA == _token) {\\n            s_balanceTokenA += _amount;\\n            s_balanceTokenB = s_k / s_balanceTokenA;\\n            s_amountOtherToken = initialTokenBalanceB - s_balanceTokenB;\\n        } else {\\n            s_balanceTokenB += _amount;\\n            s_balanceTokenA = s_k / s_balanceTokenB;\\n            s_amountOtherToken = initialTokenBalanceA - s_balanceTokenA;\\n        }\\n\\n        // add the user to the liquidity providers array\\n        s_liquidityProviders.push(msg.sender);\\n\\n        // emit liquidity added event\\n        emit liquidityAdded(_amount, s_amountOtherToken);\\n    }\\n\\n    function getAmountOtherToken() external view returns (uint) {\\n        return s_amountOtherToken;\\n    }\\n\\n    // should return the number of tokens we have for tokenA\\n    function getLiquidityTokenA() external view returns (uint) {\\n        return (s_balanceTokenA);\\n    }\\n\\n    // should return the number of tokens we have for tokenB\\n    function getLiquidityTokenB() external view returns (uint) {\\n        return (s_balanceTokenB);\\n    }\\n\\n    function getTradingFee() external pure returns (uint) {\\n        return TRADING_FEE;\\n    }\\n\\n    // function to update prices of each token based on quantity in reserves\\n\\n    function checkAmount(uint _amount) internal pure {\\n        if (_amount <= 0) {\\n            revert WinPair__ZeroAmountDeposited(_amount);\\n        }\\n    }\\n\\n    // should make sure there is enough of each token to let the trade go through\\n    function checkLiquidity() internal view {\\n        if (s_balanceTokenA <= 0) {\\n            revert WinPair__NotEnoughLiquidityA(s_balanceTokenA);\\n        }\\n\\n        if (s_balanceTokenB <= 0) {\\n            revert WinPair__NotEnoughLiquidityB(s_balanceTokenB);\\n        }\\n    }\\n\\n    // should check if liquidity providers exist\\n    function checkLiquidityProvidersExist() internal view {\\n        if (s_liquidityProviders.length > 0) {\\n            revert WinPair__LiquidityProvidersExist(\\n                s_liquidityProviders.length\\n            );\\n        }\\n    }\\n\\n    // should check the balance of the user to see if they can pay trading fee\\n    function checkBalanceOfUser() public view {\\n        if (s_balanceOfUser[msg.sender] <= TRADING_FEE) {\\n            revert WinPair__InsufficientBalance(s_balanceOfUser[msg.sender]);\\n        }\\n    }\\n\\n    function checkToken(address _token) internal pure {\\n        if (_token == address(0)) {\\n            revert WinPair__ZeroAddress(_token);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94a408e8e8621cee0071e284ab6f05d8e5003eb452c7ea3217097d05ffd0808f\",\"license\":\"MIT\"},\"contracts/WinToken.sol\":{\"content\":\"// contracts/GLDToken.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract WinToken is ERC20 {\\n    uint private s_totalSupply;\\n\\n    constructor(uint256 initialSupply) ERC20(\\\"WinToken\\\", \\\"Win\\\") {\\n        s_totalSupply += initialSupply;\\n        _mint(msg.sender, initialSupply);\\n    }\\n}\\n\",\"keccak256\":\"0x689b29fa13fb82881ce0723c34a6c37a272cf7fc73a5e9b4e8827cee6fcc3b59\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620011b5380380620011b58339818101604052810190620000379190620000c4565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506200015e565b600081519050620000be8162000144565b92915050565b60008060408385031215620000de57620000dd6200013f565b5b6000620000ee85828601620000ad565b92505060206200010185828601620000ad565b9150509250929050565b600062000118826200011f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014f816200010b565b81146200015b57600080fd5b50565b60805160601c60a05160601c6110276200018e60003960005050600081816105e7015261077f01526110276000f3fe6080604052600436106100865760003560e01c8063807de16011610059578063807de1601461011657806388955a5d146101415780639a7911741461016a578063c95f9d0e14610181578063d004f0f7146101aa57610086565b80631bd8db031461008b5780632c3c1e1f146100b657806358033f3f146100c0578063735b08c4146100eb575b600080fd5b34801561009757600080fd5b506100a06101d3565b6040516100ad9190610d0b565b60405180910390f35b6100be6101dc565b005b3480156100cc57600080fd5b506100d561032f565b6040516100e29190610d0b565b60405180910390f35b3480156100f757600080fd5b50610100610339565b60405161010d9190610d0b565b60405180910390f35b34801561012257600080fd5b5061012b610343565b6040516101389190610d0b565b60405180910390f35b34801561014d57600080fd5b5061016860048036038101906101639190610bfe565b61034d565b005b34801561017657600080fd5b5061017f6104f2565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bbe565b6105b7565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610b7e565b610747565b005b60006001905090565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461022c9190610e23565b925050819055506000808054905060016102469190610d98565b905060005b6000805490508110156102fe5781600760008084815481106102705761026f610f3a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e49190610d42565b9250508190555080806102f690610e93565b91505061024b565b50807fca37fba7960ad9edfde4e1e1d21cf7696d8a082ed1226867e646a9ace3f259de60405160405180910390a250565b6000600654905090565b6000600354905090565b6000600454905090565b61035682610a27565b61035f81610a27565b610367610a6f565b81600360008282546103799190610d42565b9250508190555080600460008282546103929190610d42565b925050819055506004546003546103a99190610dc9565b60058190555060003373ffffffffffffffffffffffffffffffffffffffff1660016040516103d690610cb6565b60006040518083038185875af1925050503d8060008114610413576040519150601f19603f3d011682016040523d82523d6000602084013e610418565b606091505b505090508061045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390610ccb565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081837ffbbbcaaede8c02d4011f67f839ff21516a6f8ba0b4242e70f55b31b7ad3f099760405160405180910390a3505050565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105b557600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f6d96d5350000000000000000000000000000000000000000000000000000000081526004016105ac9190610d0b565b60405180910390fd5b565b6105c082610a27565b60006003549050600060045490508273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16141561066a5783600360008282546106349190610d42565b9250508190555060035460055461064b9190610d98565b6004819055506004548161065f9190610e23565b6006819055506106ae565b836004600082825461067c9190610d42565b925050819055506004546005546106939190610d98565b600381905550600354826106a79190610e23565b6006819055505b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600654847feaef2f839ec84468e22b8f4072e1efdc55916b369ab4abbbc76613580cc4dabf60405160405180910390a350505050565b61075081610a27565b610758610ac0565b60006003549050600060045490508373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614156108465782600354116107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590610ceb565b60405180910390fd5b82600360008282546108109190610e23565b925050819055506003546005546108279190610d98565b6004819055508060045461083b9190610e23565b6006819055506108ce565b826004541161088a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088190610ceb565b60405180910390fd5b826004600082825461089c9190610e23565b925050819055506004546005546108b39190610d98565b600381905550816003546108c79190610e23565b6006819055505b60003373ffffffffffffffffffffffffffffffffffffffff16846040516108f490610cb6565b60006040518083038185875af1925050503d8060008114610931576040519150601f19603f3d011682016040523d82523d6000602084013e610936565b606091505b505090508061097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190610ccb565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe10e2cb44087d880df24049c1077c24f076a5889a386724037283e8f68ff90ce60405160405180910390a3610a206101dc565b5050505050565b60008111610a6c57806040517f836b5d0b000000000000000000000000000000000000000000000000000000008152600401610a639190610d0b565b60405180910390fd5b50565b600080805490501115610abe576000805490506040517f1d02305a000000000000000000000000000000000000000000000000000000008152600401610ab59190610d0b565b60405180910390fd5b565b600060035411610b09576003546040517f1e6ed288000000000000000000000000000000000000000000000000000000008152600401610b009190610d0b565b60405180910390fd5b600060045411610b52576004546040517f7e191aa5000000000000000000000000000000000000000000000000000000008152600401610b499190610d0b565b60405180910390fd5b565b600081359050610b6381610fc3565b92915050565b600081359050610b7881610fda565b92915050565b60008060408385031215610b9557610b94610f69565b5b6000610ba385828601610b54565b9250506020610bb485828601610b69565b9150509250929050565b60008060408385031215610bd557610bd4610f69565b5b6000610be385828601610b69565b9250506020610bf485828601610b54565b9150509250929050565b60008060408385031215610c1557610c14610f69565b5b6000610c2385828601610b69565b9250506020610c3485828601610b69565b9150509250929050565b6000610c4b600b83610d31565b9150610c5682610f6e565b602082019050919050565b6000610c6e601e83610d31565b9150610c7982610f97565b602082019050919050565b6000610c91600083610d26565b9150610c9c82610fc0565b600082019050919050565b610cb081610e89565b82525050565b6000610cc182610c84565b9150819050919050565b60006020820190508181036000830152610ce481610c3e565b9050919050565b60006020820190508181036000830152610d0481610c61565b9050919050565b6000602082019050610d206000830184610ca7565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d4d82610e89565b9150610d5883610e89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d8d57610d8c610edc565b5b828201905092915050565b6000610da382610e89565b9150610dae83610e89565b925082610dbe57610dbd610f0b565b5b828204905092915050565b6000610dd482610e89565b9150610ddf83610e89565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1857610e17610edc565b5b828202905092915050565b6000610e2e82610e89565b9150610e3983610e89565b925082821015610e4c57610e4b610edc565b5b828203905092915050565b6000610e6282610e69565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e9e82610e89565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ed157610ed0610edc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f4e6f7420456e6f756768206c697175696469747920666f7220746f6b656e0000600082015250565b50565b610fcc81610e57565b8114610fd757600080fd5b50565b610fe381610e89565b8114610fee57600080fd5b5056fea2646970667358221220bc9d10cbdcf6bb39d214b3c07ce86324e35e2049b137831816f1710b99cb85ff64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063807de16011610059578063807de1601461011657806388955a5d146101415780639a7911741461016a578063c95f9d0e14610181578063d004f0f7146101aa57610086565b80631bd8db031461008b5780632c3c1e1f146100b657806358033f3f146100c0578063735b08c4146100eb575b600080fd5b34801561009757600080fd5b506100a06101d3565b6040516100ad9190610d0b565b60405180910390f35b6100be6101dc565b005b3480156100cc57600080fd5b506100d561032f565b6040516100e29190610d0b565b60405180910390f35b3480156100f757600080fd5b50610100610339565b60405161010d9190610d0b565b60405180910390f35b34801561012257600080fd5b5061012b610343565b6040516101389190610d0b565b60405180910390f35b34801561014d57600080fd5b5061016860048036038101906101639190610bfe565b61034d565b005b34801561017657600080fd5b5061017f6104f2565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bbe565b6105b7565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610b7e565b610747565b005b60006001905090565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461022c9190610e23565b925050819055506000808054905060016102469190610d98565b905060005b6000805490508110156102fe5781600760008084815481106102705761026f610f3a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102e49190610d42565b9250508190555080806102f690610e93565b91505061024b565b50807fca37fba7960ad9edfde4e1e1d21cf7696d8a082ed1226867e646a9ace3f259de60405160405180910390a250565b6000600654905090565b6000600354905090565b6000600454905090565b61035682610a27565b61035f81610a27565b610367610a6f565b81600360008282546103799190610d42565b9250508190555080600460008282546103929190610d42565b925050819055506004546003546103a99190610dc9565b60058190555060003373ffffffffffffffffffffffffffffffffffffffff1660016040516103d690610cb6565b60006040518083038185875af1925050503d8060008114610413576040519150601f19603f3d011682016040523d82523d6000602084013e610418565b606091505b505090508061045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390610ccb565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081837ffbbbcaaede8c02d4011f67f839ff21516a6f8ba0b4242e70f55b31b7ad3f099760405160405180910390a3505050565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105b557600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f6d96d5350000000000000000000000000000000000000000000000000000000081526004016105ac9190610d0b565b60405180910390fd5b565b6105c082610a27565b60006003549050600060045490508273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16141561066a5783600360008282546106349190610d42565b9250508190555060035460055461064b9190610d98565b6004819055506004548161065f9190610e23565b6006819055506106ae565b836004600082825461067c9190610d42565b925050819055506004546005546106939190610d98565b600381905550600354826106a79190610e23565b6006819055505b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600654847feaef2f839ec84468e22b8f4072e1efdc55916b369ab4abbbc76613580cc4dabf60405160405180910390a350505050565b61075081610a27565b610758610ac0565b60006003549050600060045490508373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614156108465782600354116107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590610ceb565b60405180910390fd5b82600360008282546108109190610e23565b925050819055506003546005546108279190610d98565b6004819055508060045461083b9190610e23565b6006819055506108ce565b826004541161088a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088190610ceb565b60405180910390fd5b826004600082825461089c9190610e23565b925050819055506004546005546108b39190610d98565b600381905550816003546108c79190610e23565b6006819055505b60003373ffffffffffffffffffffffffffffffffffffffff16846040516108f490610cb6565b60006040518083038185875af1925050503d8060008114610931576040519150601f19603f3d011682016040523d82523d6000602084013e610936565b606091505b505090508061097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097190610ccb565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fe10e2cb44087d880df24049c1077c24f076a5889a386724037283e8f68ff90ce60405160405180910390a3610a206101dc565b5050505050565b60008111610a6c57806040517f836b5d0b000000000000000000000000000000000000000000000000000000008152600401610a639190610d0b565b60405180910390fd5b50565b600080805490501115610abe576000805490506040517f1d02305a000000000000000000000000000000000000000000000000000000008152600401610ab59190610d0b565b60405180910390fd5b565b600060035411610b09576003546040517f1e6ed288000000000000000000000000000000000000000000000000000000008152600401610b009190610d0b565b60405180910390fd5b600060045411610b52576004546040517f7e191aa5000000000000000000000000000000000000000000000000000000008152600401610b499190610d0b565b60405180910390fd5b565b600081359050610b6381610fc3565b92915050565b600081359050610b7881610fda565b92915050565b60008060408385031215610b9557610b94610f69565b5b6000610ba385828601610b54565b9250506020610bb485828601610b69565b9150509250929050565b60008060408385031215610bd557610bd4610f69565b5b6000610be385828601610b69565b9250506020610bf485828601610b54565b9150509250929050565b60008060408385031215610c1557610c14610f69565b5b6000610c2385828601610b69565b9250506020610c3485828601610b69565b9150509250929050565b6000610c4b600b83610d31565b9150610c5682610f6e565b602082019050919050565b6000610c6e601e83610d31565b9150610c7982610f97565b602082019050919050565b6000610c91600083610d26565b9150610c9c82610fc0565b600082019050919050565b610cb081610e89565b82525050565b6000610cc182610c84565b9150819050919050565b60006020820190508181036000830152610ce481610c3e565b9050919050565b60006020820190508181036000830152610d0481610c61565b9050919050565b6000602082019050610d206000830184610ca7565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d4d82610e89565b9150610d5883610e89565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d8d57610d8c610edc565b5b828201905092915050565b6000610da382610e89565b9150610dae83610e89565b925082610dbe57610dbd610f0b565b5b828204905092915050565b6000610dd482610e89565b9150610ddf83610e89565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e1857610e17610edc565b5b828202905092915050565b6000610e2e82610e89565b9150610e3983610e89565b925082821015610e4c57610e4b610edc565b5b828203905092915050565b6000610e6282610e69565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e9e82610e89565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ed157610ed0610edc565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f4e6f7420456e6f756768206c697175696469747920666f7220746f6b656e0000600082015250565b50565b610fcc81610e57565b8114610fd757600080fd5b50565b610fe381610e89565b8114610fee57600080fd5b5056fea2646970667358221220bc9d10cbdcf6bb39d214b3c07ce86324e35e2049b137831816f1710b99cb85ff64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1077,
        "contract": "contracts/WinPair.sol:WinPair",
        "label": "s_liquidityProviders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/WinPair.sol:WinPair",
        "label": "s_tokenToBeSwapped",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1081,
        "contract": "contracts/WinPair.sol:WinPair",
        "label": "s_tokenToBeGiven",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1083,
        "contract": "contracts/WinPair.sol:WinPair",
        "label": "s_balanceTokenA",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1085,
        "contract": "contracts/WinPair.sol:WinPair",
        "label": "s_balanceTokenB",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1087,
        "contract": "contracts/WinPair.sol:WinPair",
        "label": "s_k",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1089,
        "contract": "contracts/WinPair.sol:WinPair",
        "label": "s_amountOtherToken",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1093,
        "contract": "contracts/WinPair.sol:WinPair",
        "label": "s_balanceOfUser",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}